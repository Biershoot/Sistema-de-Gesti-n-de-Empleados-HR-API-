name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job de compilación y pruebas
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: hr_management
          MYSQL_USER: hr_user
          MYSQL_PASSWORD: hr_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache dependencias Maven
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Compilar aplicación
      run: ./mvnw clean compile

    - name: Ejecutar pruebas unitarias
      run: ./mvnw test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/hr_management?useSSL=false&serverTimezone=UTC
        SPRING_DATASOURCE_USERNAME: hr_user
        SPRING_DATASOURCE_PASSWORD: hr_password

    - name: Generar reporte de cobertura
      run: ./mvnw jacoco:report

    - name: Subir reporte de cobertura
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml

  # Job de análisis de código
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Ejecutar análisis de código con SpotBugs
      run: ./mvnw spotbugs:check

    - name: Ejecutar análisis de código con PMD
      run: ./mvnw pmd:check

  # Job de construcción de Docker
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login a Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Construir y subir imagen Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/hr-api:latest
          ${{ secrets.DOCKER_USERNAME }}/hr-api:${{ github.sha }}

  # Job de despliegue
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Desplegar a producción
      run: |
        echo "Desplegando aplicación a producción..."
        # Aquí irían los comandos de despliegue específicos
        # Por ejemplo, actualizar un cluster de Kubernetes,
        # o desplegar en un servidor específico
